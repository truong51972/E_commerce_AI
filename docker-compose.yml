services:
  nginx:
    build: 
      context: ./nginx
    restart: on-failure:5
    depends_on:
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/SSL:/etc/nginx/SSL
      - backend_data:/backend_data
    networks:
      private-network:
      microservices-network:
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1GB
        reservations:
          cpus: '0.50'
          memory: 512MB
        

  backend:
    build: 
      context: ./backend 
    restart: on-failure:5
    volumes:
      - ./backend:/app
      - backend_data:/backend_data
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-backend_database}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-admin}
      - USING_REDIS
    depends_on:
      - database
    networks:
      private-network:
    deploy:
      resources:
        limits:
          cpus: '4.00'
          memory: 4GB
        reservations:
          cpus: '2.00'
          memory: 2GB
          devices:
            - driver: nvidia
              capabilities: [gpu]


  redis:
    image: redis:latest
    restart: on-failure:5
    networks:
      private-network:
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1GB
        reservations:
          cpus: '0.50'
          memory: 512MB


  database:
    image: postgres:latest
    restart: on-failure:5
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-backend_database}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-admin}
    volumes:
      - postgres_db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-backend_database}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      private-network:
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1GB
        reservations:
          cpus: '0.50'
          memory: 512MB

  cloudflare_tunnel:
    build: 
      context: ./cloudflare_tunnel
    restart: on-failure:5
    environment:
      - TUNNEL_TOKEN
      - TUNNEL_ORIGIN_KEEPALIVE_TIMEOUT=30s
      - NO_AUTOUPDATE
    networks:
      private-network:
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512MB
        reservations:
          cpus: '0.25'
          memory: 256MB

  etcd:
    # container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.16
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    # container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    # ports:
      # - "9001:9001"
      # - "9000:9000"
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  standalone:
    # container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.4-gpu
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ./milvus/milvus.yaml:/milvus/configs/milvus.yaml
      - milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://standalone:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    # ports:
      # - "19530:19530"
      # - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]

  attu:
    image: zilliz/attu:dev
    # ports:
    #   - 8000:3000
    environment:
      - MILVUS_URL=http://standalone:19530

volumes:
  backend_data:
  postgres_db:
  redis_data:
  etcd:
  minio_data:
  milvus:

networks:
  microservices-network:
    driver: bridge

  private-network:
    driver: bridge
